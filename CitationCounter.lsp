(defun count-citations (name database)
	(MixerCall name database)
)
(defun MixerCall (nme database)
	(let ((Alst nil)(Olst nil))
		(setq Alst (Preprocessor_Alst nme database))
		(setq Olst (Preprocessor_Olst nme database))
		(CitationCalculator Alst Olst)
	)
)

(defun Preprocessor_Alst (naam Db )
	(let ((alst nil))
		(dolist (entry Db alst )
			(cond ((not (null ( member naam (authorl entry)))) (setq alst (cons (list (artid entry) (remove naam (authorl entry))) alst)))
				(t nil)
			)
		)
	)
)

(defun Preprocessor_Olst (naam Db )
	(let ((olst nil))
		(dolist (entry Db olst )
			(cond ((not (null ( member naam (authorl entry)))) nil)
				(t (setq olst (cons (list (year entry) (authorl entry)(citel entry)) olst)))
			)
		)
	)
)

(defun CitationCalculator (alst olst )
	(let ((count 0))
		(dolist (oelem olst count )
			(dolist (aelem alst )
				(incf count (CalculateAccordingtoRules oelem aelem))
			)
		)
	)
)

(defun CalculateAccordingtoRules (oalem aelem)
	(if (not (null ( member (artid aelem) (citel oalem))) )
		(GiveCount oalem aelem)
		0
	)
)

(defun GiveCount (oalem aelem)
; Changes to rules are to be done here if needed
;Need to check if it should follow a particular syntax
	(cond ((and (IscitationByCoAuthor (second oalem)(citel aelem))(IsyearPost1995 (first oalem))) 1)
		  ((and (IscitationByCoAuthor (second oalem)(citel aelem)) (not (IsyearPost1995 (first oalem)))) 2 )
		  ((IsyearPost1995 (first oalem)) 6)
		  (t 4 )
	)
)

(defun IsyearPost1995 (year)
	(>= year 1995)
)

(defun IscitationByCoAuthor (Oauthorl Aauthorl)
	(/= (length (set-difference Oauthorl Aauthorl :test 'equal)) (length Oauthorl))
)

(defun artid (entry)
	(cond ((and (not (null entry)) (listp entry)) (first entry))
		(t nil)
	)
)

(defun year (entry)
	(cond ((and (not (null entry)) (listp entry) (not (null (second entry)))(numberp (second entry)))(second entry))
		(t nil)
	)
)

(defun authorl (entry)
	(cond ((and (not (null entry)) (listp entry) (not (null (third entry)))(listp (third entry)))(third entry))
		(t nil)
	)
)

(defun citel (entry)
	(cond ((and (not (null entry)) (listp entry) (not (null (last entry)))(listp (last entry))) (first (last entry)))
		(t nil)
	)
)